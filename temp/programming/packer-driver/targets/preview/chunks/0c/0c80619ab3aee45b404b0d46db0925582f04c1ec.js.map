{"version":3,"sources":["file:///G:/Cocos/KillGrass/gecao/assets/scripts/PlayerCombat.ts"],"names":["_decorator","Component","Vec3","Prefab","instantiate","EnemyManager","Bullet","ccclass","property","PlayerCombat","tooltip","type","_isShooting","_isInCooldown","_currentBullets","_currentTarget","takeDamage","damage","health","Math","max","console","log","node","destroy","onLoad","schedule","_updateNearestEnemy","checkInterval","onDestroy","unschedule","nearestEnemy","_findNearestEnemy","isValid","_isCloserEnemy","startShooting","newEnemy","currentPos","getWorldPosition","currentTargetDist","distance","Infinity","newEnemyDist","enemies","instance","getEnemies","length","minDistance","attackRange","enemy","enemyPos","getNearestEnemy","canShoot","_shootBullet","bulletsPerRound","_startCooldown","bullet","bulletPrefab","parent","setWorldPosition","targetPos","direction","x","y","normalize","angle","atan2","PI","bulletComp","getComponent","init","scheduleOnce","shootInterval","_checkAndShoot","shootCooldown"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, Prefab, instantiate } from 'cc';\r\nimport { EnemyManager } from './EnemyManager';\r\nimport { Bullet } from './Bullet';\r\nimport { PlayerHealthBar } from './PlayerHealthBar';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PlayerCombat')\r\nexport class PlayerCombat extends Component {\r\n    @property({ tooltip: '血量' })\r\n    public health: number = 300;\r\n\r\n    // 添加受伤方法\r\n    public takeDamage(damage: number) {\r\n        this.health = Math.max(0, this.health - damage);\r\n        console.log(`玩家受伤，当前血量：${this.health}`);\r\n        // 如果需要，可以在这里添加死亡判断\r\n        if (this.health <= 0) {\r\n            this.node.destroy();\r\n        }\r\n    }\r\n\r\n    @property({ tooltip: '攻击范围' })\r\n    public attackRange: number = 360;\r\n\r\n    @property({ tooltip: '子弹射击间隔' })\r\n    public shootInterval: number = 0.13;\r\n\r\n    @property({ tooltip: '单轮子弹数量' })\r\n    public bulletsPerRound: number = 10;\r\n\r\n    @property({ tooltip: '射击CD' })\r\n    public shootCooldown: number = 0.6;\r\n\r\n    @property({ type: [Prefab], tooltip: '敌人预制体' })\r\n    public enemyPrefabs: Prefab[] = [];\r\n\r\n    @property({ type: Prefab, tooltip: '子弹预制体' })\r\n    public bulletPrefab: Prefab;\r\n\r\n    private _isShooting: boolean = false;\r\n    private _isInCooldown: boolean = false;\r\n    private _currentBullets: number = 0;\r\n    private _currentTarget: Node = null;  // 当前目标敌人\r\n\r\n    @property({ tooltip: '检测敌人间隔' })\r\n    public checkInterval: number = 0.2;\r\n\r\n    // 删除这个属性\r\n    // @property({ type: Prefab, tooltip: '血条预制体' })\r\n    // public healthBarPrefab: Prefab;\r\n\r\n    onLoad() {\r\n        // 只保留检查敌人的代码\r\n        this.schedule(this._updateNearestEnemy, this.checkInterval);\r\n        \r\n        // 删除创建血条的代码\r\n        // const healthBar = instantiate(this.healthBarPrefab);\r\n        // healthBar.parent = this.node;\r\n        // healthBar.setPosition(0, -70, 0);\r\n        // healthBar.addComponent(PlayerHealthBar);\r\n    }\r\n\r\n    onDestroy() {\r\n        this.unschedule(this._updateNearestEnemy);\r\n    }\r\n\r\n    private _updateNearestEnemy() {\r\n        const nearestEnemy = this._findNearestEnemy();\r\n        \r\n        // 如果当前目标无效或找到更近的目标，则更新目标\r\n        if (!this._currentTarget?.isValid || \r\n            (nearestEnemy && this._isCloserEnemy(nearestEnemy))) {\r\n            this._currentTarget = nearestEnemy;\r\n        }\r\n\r\n        // 有目标且未在射击状态时开始射击\r\n        if (this._currentTarget && !this._isShooting) {\r\n            this.startShooting();\r\n        }\r\n    }\r\n\r\n    private _isCloserEnemy(newEnemy: Node): boolean {\r\n        const currentPos = this.node.getWorldPosition();\r\n        const currentTargetDist = this._currentTarget ? \r\n            Vec3.distance(currentPos, this._currentTarget.getWorldPosition()) : \r\n            Infinity;\r\n        const newEnemyDist = Vec3.distance(currentPos, newEnemy.getWorldPosition());\r\n        return newEnemyDist < currentTargetDist;\r\n    }\r\n\r\n    // 寻找范围内最近的敌人\r\n    private _findNearestEnemy(): Node | null {\r\n        const enemies = EnemyManager.instance.getEnemies();\r\n        if (!enemies || enemies.length === 0) return null;\r\n\r\n        const currentPos = this.node.getWorldPosition();\r\n        let nearestEnemy = null;\r\n        let minDistance = this.attackRange;\r\n\r\n        for (const enemy of enemies) {\r\n            if (!enemy.isValid) continue;\r\n            \r\n            const enemyPos = enemy.getWorldPosition();\r\n            const distance = Vec3.distance(currentPos, enemyPos);\r\n            \r\n            if (distance <= this.attackRange && (nearestEnemy === null || distance < minDistance)) {\r\n                nearestEnemy = enemy;\r\n                minDistance = distance;\r\n            }\r\n        }\r\n\r\n        return nearestEnemy;\r\n    }\r\n\r\n    // 获取当前目标敌人（供其他组件使用）\r\n    getNearestEnemy(): Node | null {\r\n        return this._currentTarget?.isValid ? this._currentTarget : null;\r\n    }\r\n\r\n    canShoot(): boolean {\r\n        return !this._isInCooldown && this._currentTarget?.isValid;\r\n    }\r\n\r\n    private _shootBullet() {\r\n        if (this._currentBullets >= this.bulletsPerRound) {\r\n            this._isShooting = false;\r\n            this._startCooldown();\r\n            return;\r\n        }\r\n\r\n        if (!this._currentTarget?.isValid) {\r\n            this._isShooting = false;\r\n            return;\r\n        }\r\n\r\n        // 创建子弹\r\n        const bullet = instantiate(this.bulletPrefab);\r\n        bullet.parent = this.node.parent.parent; // 设置为 GameCanvas\r\n\r\n        // 设置子弹初始位置和方向\r\n        const currentPos = this.node.getWorldPosition();\r\n        bullet.setWorldPosition(currentPos);\r\n\r\n        // 计算射击方向\r\n        const targetPos = this._currentTarget.getWorldPosition();\r\n        const direction = new Vec3(\r\n            targetPos.x - currentPos.x,\r\n            targetPos.y - currentPos.y,\r\n            0\r\n        ).normalize();\r\n\r\n        // 设置子弹旋转\r\n        const angle = Math.atan2(direction.y, direction.x) * 180 / Math.PI - 90;\r\n        bullet.angle = angle;\r\n\r\n        // 初始化子弹\r\n        const bulletComp = bullet.getComponent(Bullet);\r\n        if (bulletComp) {\r\n            bulletComp.init(direction);\r\n        }\r\n\r\n        this._currentBullets++;\r\n        this.scheduleOnce(() => this._shootBullet(), this.shootInterval);\r\n    }\r\n    private _checkAndShoot() {\r\n        const enemy = this.getNearestEnemy();\r\n        if (enemy && !this._isShooting) {\r\n            this.startShooting();\r\n        }\r\n    }\r\n\r\n    startShooting() {\r\n        if (!this.canShoot()) return;\r\n\r\n        this._isShooting = true;\r\n        this._currentBullets = 0;\r\n        this._shootBullet();\r\n    }\r\n\r\n    \r\n    private _startCooldown() {\r\n        this._isInCooldown = true;\r\n        this.scheduleOnce(() => this._isInCooldown = false, this.shootCooldown);\r\n    }\r\n}"]}