{"version":3,"sources":["file:///G:/Cocos/KillGrass/gecao/assets/scripts/PlayerMovement.ts"],"names":["_decorator","Component","Vec2","Vec3","Input","input","CircleCollider2D","RigidBody2D","ERigidBody2DType","Contact2DType","ccclass","property","PlayerMovement","tooltip","MAP_BOUNDS","minX","maxX","minY","maxY","_moveDirection","_isMoving","_collider","_blockedDirections","onEnable","on","EventType","TOUCH_START","_onTouchStart","TOUCH_MOVE","_onTouchMove","TOUCH_END","_onTouchEnd","onDisable","off","event","touchPos","getUILocation","set","delta","x","getStartLocation","y","distance","length","stopDistance","normalize","update","deltaTime","currentPos","node","getWorldPosition","moveStep","moveSpeed","moveVec","blockedDir","dot","parallel","parallelDot","newPos","Math","max","min","z","setWorldPosition","onLoad","getComponentInChildren","group","sensor","enabled","radius","friction","restitution","BEGIN_CONTACT","onBeginContact","END_CONTACT","onEndContact","rigidbody","getComponent","enabledContactListener","fixedRotation","type","Dynamic","gravityScale","linearDamping","onDestroy","selfCollider","otherCollider","contact","enemyPos","direction","push","isMoving","getMoveDirection"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec2, Vec3, EventTouch, Input, input, \r\n    CircleCollider2D, RigidBody2D, ERigidBody2DType, Contact2DType, \r\n    Collider2D, IPhysics2DContact } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PlayerMovement')\r\nexport class PlayerMovement extends Component {\r\n    @property({ tooltip: '移动速度' })\r\n    public moveSpeed: number = 300;\r\n\r\n    @property({ tooltip: '触控停止范围区间' })\r\n    public stopDistance: number = 50;\r\n\r\n    private readonly MAP_BOUNDS = {\r\n        minX: -1666.5,\r\n        maxX: 1666.5,\r\n        minY: -2222,\r\n        maxY: 2222\r\n    };\r\n\r\n    private _moveDirection: Vec3 = new Vec3();\r\n    private _isMoving: boolean = false;\r\n    private _collider: CircleCollider2D | null = null;\r\n    private _blockedDirections: Vec2[] = [];\r\n\r\n    onEnable() {\r\n        input.on(Input.EventType.TOUCH_START, this._onTouchStart, this);\r\n        input.on(Input.EventType.TOUCH_MOVE, this._onTouchMove, this);\r\n        input.on(Input.EventType.TOUCH_END, this._onTouchEnd, this);\r\n    }\r\n\r\n    onDisable() {\r\n        input.off(Input.EventType.TOUCH_START, this._onTouchStart, this);\r\n        input.off(Input.EventType.TOUCH_MOVE, this._onTouchMove, this);\r\n        input.off(Input.EventType.TOUCH_END, this._onTouchEnd, this);\r\n    }\r\n\r\n    private _onTouchStart(event: EventTouch) {\r\n        const touchPos = event.getUILocation();\r\n        this._moveDirection.set(0, 0, 0);\r\n        this._isMoving = false;\r\n    }\r\n\r\n    private _onTouchMove(event: EventTouch) {\r\n        const touchPos = event.getUILocation();\r\n        const delta = new Vec2(touchPos.x - event.getStartLocation().x, \r\n                             touchPos.y - event.getStartLocation().y);\r\n        \r\n        const distance = delta.length();\r\n        if (distance <= this.stopDistance) {\r\n            this._isMoving = false;\r\n            return;\r\n        }\r\n\r\n        delta.normalize();\r\n        this._moveDirection.set(delta.x, delta.y, 0);\r\n        this._isMoving = true;\r\n    }\r\n\r\n    private _onTouchEnd() {\r\n        this._isMoving = false;\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        if (!this._isMoving) return;\r\n\r\n        const currentPos = this.node.getWorldPosition();\r\n        const moveStep = this.moveSpeed * deltaTime;\r\n        \r\n        // 检查是否被阻挡，如果被阻挡则计算可移动的分量\r\n        const moveVec = new Vec2(this._moveDirection.x, this._moveDirection.y);\r\n        for (const blockedDir of this._blockedDirections) {\r\n            const dot = Vec2.dot(moveVec, blockedDir);\r\n            if (dot > 0.7) {  // 调整阈值，使碰撞更自然\r\n                // 计算平行于碰撞面的移动分量\r\n                const parallel = new Vec2(-blockedDir.y, blockedDir.x);\r\n                const parallelDot = Vec2.dot(moveVec, parallel);\r\n                \r\n                // 更新移动方向为平行分量\r\n                this._moveDirection.x = parallel.x * parallelDot;\r\n                this._moveDirection.y = parallel.y * parallelDot;\r\n                this._moveDirection.normalize();\r\n                break;  // 只处理最主要的碰撞\r\n            }\r\n        }\r\n        \r\n        // 计算新位置并限制边界\r\n        const newPos = new Vec3(\r\n            Math.max(this.MAP_BOUNDS.minX, Math.min(this.MAP_BOUNDS.maxX, \r\n                   currentPos.x + this._moveDirection.x * moveStep)),\r\n            Math.max(this.MAP_BOUNDS.minY, Math.min(this.MAP_BOUNDS.maxY, \r\n                   currentPos.y + this._moveDirection.y * moveStep)),\r\n            currentPos.z\r\n        );\r\n        \r\n        this.node.setWorldPosition(newPos);\r\n    }\r\n\r\n    onLoad() {\r\n        // 获取子节点的碰撞体组件\r\n        this._collider = this.node.getComponentInChildren(CircleCollider2D);\r\n        if (this._collider) {\r\n            this._collider.group = 2;\r\n            this._collider.sensor = false;\r\n            this._collider.enabled = true;\r\n            this._collider.radius = 30;  // 减小碰撞半径\r\n            this._collider.friction = 0;  // 减少摩擦力\r\n            this._collider.restitution = 0;  // 没有弹性\r\n            this._collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n            this._collider.on(Contact2DType.END_CONTACT, this.onEndContact, this);\r\n        }\r\n\r\n        // 获取刚体组件\r\n        const rigidbody = this.getComponent(RigidBody2D);\r\n        if (rigidbody) {\r\n            rigidbody.enabledContactListener = true;\r\n            rigidbody.fixedRotation = true;\r\n            rigidbody.type = ERigidBody2DType.Dynamic;\r\n            rigidbody.gravityScale = 0;\r\n            rigidbody.linearDamping = 0;\r\n        }\r\n    }\r\n\r\n    onDestroy() {\r\n        if (this._collider) {\r\n            this._collider.off(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n            this._collider.off(Contact2DType.END_CONTACT, this.onEndContact, this);\r\n        }\r\n    }\r\n\r\n    private onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        if (otherCollider.node.getComponent('Enemy')) {\r\n            const currentPos = this.node.getWorldPosition();\r\n            const enemyPos = otherCollider.node.getWorldPosition();\r\n            \r\n            // 计算碰撞方向\r\n            const direction = new Vec2(\r\n                enemyPos.x - currentPos.x,\r\n                enemyPos.y - currentPos.y\r\n            ).normalize();\r\n            \r\n            this._blockedDirections.push(direction);\r\n        }\r\n    }\r\n\r\n    private onEndContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        if (otherCollider.node.getComponent('Enemy')) {\r\n            this._blockedDirections = [];\r\n        }\r\n    }\r\n\r\n    public isMoving(): boolean {\r\n        return this._isMoving;\r\n    }\r\n\r\n    public getMoveDirection(): Vec3 {\r\n        return this._moveDirection;\r\n    }\r\n}"]}