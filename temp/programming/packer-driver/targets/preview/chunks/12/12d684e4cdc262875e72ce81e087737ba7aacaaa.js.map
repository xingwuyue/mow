{"version":3,"sources":["file:///G:/Cocos/KillGrass/gecao/assets/scripts/PlayerHealth.ts"],"names":["_decorator","Component","ProgressBar","Camera","view","ccclass","property","PlayerHealth","tooltip","_currentHp","_targetNode","onLoad","maxHp","hpBar","progress","init","targetNode","updatePosition","worldPos","worldPosition","mainCamera","node","scene","getComponentInChildren","visibleSize","getVisibleSize","screenPos","convertToUINode","parent","setPosition","x","y","offsetY","takeDamage","damage","Math","max","die","destroy","lateUpdate"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,W,OAAAA,W;AAAmBC,MAAAA,M,OAAAA,M;AAAqBC,MAAAA,I,OAAAA,I;;;;;;;;;OACxE;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;8BAGjBO,Y,WADZF,OAAO,CAAC,cAAD,C,UAEHC,QAAQ,CAAC;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAD,C,UAGRF,QAAQ,CAACJ,WAAD,C,UAGRI,QAAQ,CAAC;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAD,C,2BARb,MACaD,YADb,SACkCN,SADlC,CAC4C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAUhCQ,UAVgC,GAUX,CAVW;AAAA,eAWhCC,WAXgC,GAWL,IAXK;AAAA;;AAaxCC,QAAAA,MAAM,GAAG;AACL,eAAKF,UAAL,GAAkB,KAAKG,KAAvB;;AACA,cAAI,KAAKC,KAAT,EAAgB;AACZ,iBAAKA,KAAL,CAAWC,QAAX,GAAsB,CAAtB;AACH;AACJ;;AAEMC,QAAAA,IAAI,CAACC,UAAD,EAAmB;AAC1B,eAAKN,WAAL,GAAmBM,UAAnB,CAD0B,CAE1B;;AACA,eAAKC,cAAL;AACH;;AAEOA,QAAAA,cAAc,GAAG;AACrB,cAAI,CAAC,KAAKP,WAAV,EAAuB,OADF,CAGrB;;AACA,cAAMQ,QAAQ,GAAG,KAAKR,WAAL,CAAiBS,aAAlC,CAJqB,CAMrB;;AACA,cAAMC,UAAU,GAAG,KAAKC,IAAL,CAAUC,KAAV,CAAgBC,sBAAhB,CAAuCpB,MAAvC,CAAnB;AACA,cAAI,CAACiB,UAAL,EAAiB,OARI,CAUrB;;AACA,cAAMI,WAAW,GAAGpB,IAAI,CAACqB,cAAL,EAApB,CAXqB,CAarB;;AACA,cAAMC,SAAS,GAAGN,UAAU,CAACO,eAAX,CAA2BT,QAA3B,EAAqC,KAAKG,IAAL,CAAUO,MAA/C,CAAlB,CAdqB,CAgBrB;;AACA,eAAKP,IAAL,CAAUQ,WAAV,CACIH,SAAS,CAACI,CADd,EAEIJ,SAAS,CAACK,CAAV,GAAc,KAAKC,OAFvB,EAGI,CAHJ;AAKH;;AAEMC,QAAAA,UAAU,CAACC,MAAD,EAAiB;AAC9B,eAAKzB,UAAL,GAAkB0B,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,KAAK3B,UAAL,GAAkByB,MAA9B,CAAlB;;AACA,cAAI,KAAKrB,KAAT,EAAgB;AACZ,iBAAKA,KAAL,CAAWC,QAAX,GAAsB,KAAKL,UAAL,GAAkB,KAAKG,KAA7C;AACH;;AAED,cAAI,KAAKH,UAAL,IAAmB,CAAvB,EAA0B;AACtB,iBAAK4B,GAAL;AACH;AACJ;;AAEOA,QAAAA,GAAG,GAAG;AACV,eAAKhB,IAAL,CAAUiB,OAAV;;AACA,cAAI,KAAK5B,WAAT,EAAsB;AAClB,iBAAKA,WAAL,CAAiB4B,OAAjB;AACH;AACJ;;AAEDC,QAAAA,UAAU,GAAG;AACT,eAAKtB,cAAL;AACH;;AAtEuC,O;;;;;iBAEjB,G;;;;;;;iBAGY,I;;;;;;;iBAGV,CAAC,E","sourcesContent":["import { _decorator, Component, Node, ProgressBar, Vec3, Camera, UITransform, view } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PlayerHealth')\r\nexport class PlayerHealth extends Component {\r\n    @property({ tooltip: '最大血量' })\r\n    public maxHp: number = 100;\r\n\r\n    @property(ProgressBar)\r\n    public hpBar: ProgressBar | null = null;\r\n\r\n    @property({ tooltip: '血条偏移Y轴距离' })\r\n    public offsetY: number = -70;\r\n\r\n    private _currentHp: number = 0;\r\n    private _targetNode: Node | null = null;\r\n\r\n    onLoad() {\r\n        this._currentHp = this.maxHp;\r\n        if (this.hpBar) {\r\n            this.hpBar.progress = 1;\r\n        }\r\n    }\r\n\r\n    public init(targetNode: Node) {\r\n        this._targetNode = targetNode;\r\n        // 初始化位置\r\n        this.updatePosition();\r\n    }\r\n\r\n    private updatePosition() {\r\n        if (!this._targetNode) return;\r\n        \r\n        // 获取目标节点的世界坐标\r\n        const worldPos = this._targetNode.worldPosition;\r\n        \r\n        // 获取主相机\r\n        const mainCamera = this.node.scene.getComponentInChildren(Camera);\r\n        if (!mainCamera) return;\r\n\r\n        // 获取屏幕尺寸\r\n        const visibleSize = view.getVisibleSize();\r\n        \r\n        // 将世界坐标转换为屏幕坐标\r\n        const screenPos = mainCamera.convertToUINode(worldPos, this.node.parent);\r\n        \r\n        // 设置血条位置\r\n        this.node.setPosition(\r\n            screenPos.x,\r\n            screenPos.y + this.offsetY,\r\n            0\r\n        );\r\n    }\r\n\r\n    public takeDamage(damage: number) {\r\n        this._currentHp = Math.max(0, this._currentHp - damage);\r\n        if (this.hpBar) {\r\n            this.hpBar.progress = this._currentHp / this.maxHp;\r\n        }\r\n\r\n        if (this._currentHp <= 0) {\r\n            this.die();\r\n        }\r\n    }\r\n\r\n    private die() {\r\n        this.node.destroy();\r\n        if (this._targetNode) {\r\n            this._targetNode.destroy();\r\n        }\r\n    }\r\n\r\n    lateUpdate() {\r\n        this.updatePosition();\r\n    }\r\n}"]}