{"version":3,"sources":["file:///G:/Cocos/KillGrass/PlayableMowGame/PlayableMowGame/assets/scripts/Enemy.ts"],"names":["_decorator","Component","Vec3","CCFloat","BoxCollider2D","ccclass","property","Enemy","type","tooltip","target","isElite","_lastAttackTime","_isDead","_deathTime","update","deltaTime","node","destroy","targetPos","worldPosition","myPos","baseDirection","subtract","normalize","avoidanceForce","calculateAvoidanceForce","multiplyScalar","direction","add","distance","angle","Math","atan2","y","x","PI","attackRange","moveAmount","moveSpeed","newPos","setWorldPosition","tryAttack","enemies","parent","getComponentsInChildren","enemy","isDead","enemyPos","avoidanceRadius","away","force","now","Date","attackInterval","attack","halfAngle","attackAngle","currentAngle","forwardAngle","angleDiff","abs","console","log","takeDamage","damage","health","setElite","attackPower","onLoad","name","position","active","collider","getComponent","enabled","sensor","onBeginContact","selfCollider","otherCollider","contact","onDeath"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, CCFloat, BoxCollider2D, Contact2DType, Collider2D, IPhysics2DContact } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Enemy')\nexport class Enemy extends Component {\n    @property({ type: CCFloat, tooltip: '碰撞半径' })\n    public collisionRadius: number = 20;\n\n    @property({ type: CCFloat, tooltip: '敌人血量' })\n    public health: number = 20;\n\n    @property({ type: CCFloat, tooltip: '敌人移动速度' })\n    public moveSpeed: number = 20;\n\n    @property({ type: CCFloat, tooltip: '敌人攻击力' })\n    public attackPower: number = 10;\n\n    @property({ type: CCFloat, tooltip: '敌人攻击范围' })\n    public attackRange: number = 2;\n\n    @property({ type: CCFloat, tooltip: '敌人攻击角度(度)' })\n    public attackAngle: number = 60;\n\n    @property({ type: CCFloat, tooltip: '敌人攻击间隔(秒)' })\n    public attackInterval: number = 0.8;\n\n    public target: Node | null = null;\n    public isElite: boolean = false;\n\n    private _lastAttackTime: number = 0;\n\n    private _isDead: boolean = false;\n    private _deathTime: number = 0;\n\n    @property({ type: CCFloat, tooltip: '避障检测半径' })\n    public avoidanceRadius: number = 40;\n\n    @property({ type: CCFloat, tooltip: '避障力度' })\n    public avoidanceForce: number = 0.5;\n\n    update(deltaTime: number) {\n        if (this._isDead) {\n            this.node.destroy();\n            return;\n        }\n    \n        if (!this.target) return;\n    \n        const targetPos = this.target.worldPosition;\n        const myPos = this.node.worldPosition;\n        \n        // 计算朝向目标的基础方向\n        const baseDirection = Vec3.subtract(new Vec3(), targetPos, myPos).normalize();\n        \n        // 获取避障力并大幅降低其影响\n        const avoidanceForce = this.calculateAvoidanceForce();\n        avoidanceForce.multiplyScalar(0.1); // 将避障力降低到很小\n        \n        // 增加基础方向的权重\n        baseDirection.multiplyScalar(2.0); // 加强追踪力度\n        \n        // 合并方向，确保基础方向占主导\n        const direction = Vec3.add(new Vec3(), baseDirection, avoidanceForce).normalize();\n        \n        const distance = Vec3.distance(targetPos, myPos);\n        const angle = Math.atan2(direction.y, direction.x) * 180 / Math.PI;\n        this.node.angle = angle - 90;\n    \n        // 只要不在攻击范围内就持续移动\n        if (distance > this.attackRange) {\n            const moveAmount = this.moveSpeed * deltaTime;\n            const newPos = new Vec3(\n                myPos.x + direction.x * moveAmount,\n                myPos.y + direction.y * moveAmount,\n                0\n            );\n            this.node.setWorldPosition(newPos);\n        } else {\n            // 在攻击范围内时尝试攻击\n            this.tryAttack();\n        }\n    }\n\n    private calculateAvoidanceForce(): Vec3 {\n        const avoidanceForce = new Vec3();\n        const myPos = this.node.worldPosition;\n        \n        const enemies = this.node.parent?.getComponentsInChildren(Enemy) || [];\n        \n        for (const enemy of enemies) {\n            if (enemy === this || enemy.isDead()) continue;\n            \n            const enemyPos = enemy.node.worldPosition;\n            const distance = Vec3.distance(myPos, enemyPos);\n            \n            if (distance < this.avoidanceRadius && distance > 0) {\n                const away = Vec3.subtract(new Vec3(), myPos, enemyPos).normalize();\n                const force = (this.avoidanceRadius - distance) / this.avoidanceRadius;\n                away.multiplyScalar(force * this.avoidanceForce);\n                avoidanceForce.add(away);\n            }\n        }\n        \n        return avoidanceForce;\n    }\n\n    private tryAttack() {\n        const now = Date.now();\n        if (now - this._lastAttackTime >= this.attackInterval * 1000) {\n            this.attack();\n            this._lastAttackTime = now;\n        }\n    }\n\n    private attack() {\n        if (!this.target) return;\n\n        const targetPos = this.target.worldPosition;\n        const myPos = this.node.worldPosition;\n        const direction = Vec3.subtract(new Vec3(), targetPos, myPos);\n        const angle = Math.atan2(direction.y, direction.x) * 180 / Math.PI;\n\n        // 检查目标是否在攻击角度范围内\n        const halfAngle = this.attackAngle / 2;\n        const currentAngle = (angle + 360) % 360;\n        const forwardAngle = (this.node.angle + 360) % 360;\n        const angleDiff = Math.abs(currentAngle - forwardAngle);\n\n        if (angleDiff <= halfAngle || angleDiff >= 360 - halfAngle) {\n            // 在攻击角度内，造成伤害\n            console.log('Enemy attacking!');\n            // TODO: 调用玩家受伤方法\n        }\n    }\n\n    public takeDamage(damage: number) {\n        if (this._isDead) return;\n        \n        this.health -= damage;\n        if (this.health <= 0) {\n            this._isDead = true;\n            this._deathTime = Date.now();\n            // 可以在这里添加死亡动画或效果\n        }\n    }\n\n    // 精英怪设置\n    public setElite() {\n        if (this.isElite) {\n            this.health *= 2;\n            this.attackPower *= 1.5;\n            this.moveSpeed *= 0.8;\n            // TODO: 可以在这里设置精英怪的外观\n        }\n    }\n    public isDead(): boolean {\n        return this._isDead;\n    }\n    onLoad() {\n        console.log('Enemy onLoad - 节点信息:', {\n            name: this.node.name,\n            position: this.node.position,\n            parent: this.node.parent?.name,\n            active: this.node.active\n        });\n    \n        const collider = this.getComponent(BoxCollider2D);\n        if (collider) {\n            collider.enabled = true;\n            // 设置敌人的碰撞组为3（ENEMY组）\n            //collider.group = 3;\n            collider.sensor = false;\n        }\n    }\n\n    private onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\n        console.log('Enemy collision detected with:', otherCollider.node.name);\n    }\n    private onDeath() {\n            // 立即销毁敌人节点\n            this.node.destroy();\n        }\n}"]}