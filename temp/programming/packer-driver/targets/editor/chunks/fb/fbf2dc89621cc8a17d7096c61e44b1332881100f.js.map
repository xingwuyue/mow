{"version":3,"sources":["file:///G:/Cocos/KillGrass/gecao/assets/scripts/Enemy.ts"],"names":["_decorator","Component","Vec3","CircleCollider2D","Contact2DType","RigidBody2D","ERigidBody2DType","EnemyManager","PlayerCombat","ccclass","property","Enemy","tooltip","_isAttacking","_canAttack","_currentDirection","_collider","_currentHealth","_isColliding","_playerCombat","onLoad","getComponent","group","enabled","sensor","on","BEGIN_CONTACT","onBeginContact","END_CONTACT","onEndContact","_safeDistance","radius","rigidbody","type","Dynamic","fixedRotation","linearDamping","gravityScale","enabledContactListener","instance","addEnemy","node","maxHealth","playerNode","getPlayerNode","onDestroy","off","removeEnemy","update","dt","startTime","performance","now","currentPos","getWorldPosition","targetPos","worldPosition","subtract","normalize","angle","Math","atan2","y","x","PI","moveAmount","moveSpeed","newPos","z","setWorldPosition","endTime","selfCollider","otherCollider","contact","playerCombat","attack","takeDamage","attackPower","console","log","scheduleOnce","isValid","attackInterval","damage","destroy","getHealthPercent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,gB,OAAAA,gB;AAAkBC,MAAAA,a,OAAAA,a;AAClCC,MAAAA,W,OAAAA,W;AAAmBC,MAAAA,gB,OAAAA,gB;;AACtCC,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,Y,iBAAAA,Y;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBV,U;;uBAGjBW,K,WADZF,OAAO,CAAC,OAAD,C,UAEHC,QAAQ,CAAC;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAD,C,UAGRF,QAAQ,CAAC;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAD,C,UAGRF,QAAQ,CAAC;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAD,C,UAGRF,QAAQ,CAAC;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAD,C,UAGRF,QAAQ,CAAC;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAD,C,2BAdb,MACaD,KADb,SAC2BV,SAD3B,CACqC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAgBzBY,YAhByB,GAgBD,KAhBC;AAAA,eAiBzBC,UAjByB,GAiBH,IAjBG;AAAA,eAkBzBC,iBAlByB,GAkBC,IAAIb,IAAJ,EAlBD;AAAA,eAmBzBc,SAnByB,GAmBY,IAnBZ;AAAA,eAoBzBC,cApByB,GAoBA,CApBA;AAAA,eAqBzBC,YArByB,GAqBD,KArBC;AAAA,eAsBzBC,aAtByB,GAsBY,IAtBZ;AAAA;;AAwBjCC,QAAAA,MAAM,GAAG;AACL,eAAKJ,SAAL,GAAiB,KAAKK,YAAL,CAAkBlB,gBAAlB,CAAjB;;AACA,cAAI,KAAKa,SAAT,EAAoB;AAChB,iBAAKA,SAAL,CAAeM,KAAf,GAAuB,CAAvB;AACA,iBAAKN,SAAL,CAAeO,OAAf,GAAyB,IAAzB;AACA,iBAAKP,SAAL,CAAeQ,MAAf,GAAwB,IAAxB,CAHgB,CAGc;;AAC9B,iBAAKR,SAAL,CAAeS,EAAf,CAAkBrB,aAAa,CAACsB,aAAhC,EAA+C,KAAKC,cAApD,EAAoE,IAApE;;AACA,iBAAKX,SAAL,CAAeS,EAAf,CAAkBrB,aAAa,CAACwB,WAAhC,EAA6C,KAAKC,YAAlD,EAAgE,IAAhE;;AACA,iBAAKC,aAAL,GAAqB,KAAKd,SAAL,CAAee,MAAf,GAAwB,CAA7C;AACH,WATI,CAWL;;;AACA,gBAAMC,SAAS,GAAG,KAAKX,YAAL,CAAkBhB,WAAlB,CAAlB;;AACA,cAAI2B,SAAJ,EAAe;AACXA,YAAAA,SAAS,CAACC,IAAV,GAAiB3B,gBAAgB,CAAC4B,OAAlC;AACAF,YAAAA,SAAS,CAACG,aAAV,GAA0B,IAA1B,CAFW,CAEsB;;AACjCH,YAAAA,SAAS,CAACI,aAAV,GAA0B,CAA1B,CAHW,CAGsB;;AACjCJ,YAAAA,SAAS,CAACK,YAAV,GAAyB,CAAzB,CAJW,CAIsB;;AACjCL,YAAAA,SAAS,CAACM,sBAAV,GAAmC,IAAnC;AACH,WAnBI,CAqBL;;;AACA;AAAA;AAAA,4CAAaC,QAAb,CAAsBC,QAAtB,CAA+B,KAAKC,IAApC,EAtBK,CAuBL;;AACA,eAAKxB,cAAL,GAAsB,KAAKyB,SAA3B,CAxBK,CA0BJ;;AACA,gBAAMC,UAAU,GAAG;AAAA;AAAA,4CAAaJ,QAAb,CAAsBK,aAAtB,EAAnB;;AACA,cAAID,UAAJ,EAAgB;AACZ,iBAAKxB,aAAL,GAAqBwB,UAAU,CAACtB,YAAX;AAAA;AAAA,6CAArB;AACH;AACJ;;AAEFwB,QAAAA,SAAS,GAAG;AACR,cAAI,KAAK7B,SAAT,EAAoB;AAChB,iBAAKA,SAAL,CAAe8B,GAAf,CAAmB1C,aAAa,CAACsB,aAAjC,EAAgD,KAAKC,cAArD,EAAqE,IAArE;;AACA,iBAAKX,SAAL,CAAe8B,GAAf,CAAmB1C,aAAa,CAACwB,WAAjC,EAA8C,KAAKC,YAAnD,EAAiE,IAAjE;AACH,WAJO,CAMR;;;AACA,cAAI;AAAA;AAAA,4CAAaU,QAAjB,EAA2B;AACvB;AAAA;AAAA,8CAAaA,QAAb,CAAsBQ,WAAtB,CAAkC,KAAKN,IAAvC;AACH;AACJ;;AAEDO,QAAAA,MAAM,CAACC,EAAD,EAAa;AACf,gBAAMC,SAAS,GAAGC,WAAW,CAACC,GAAZ,EAAlB;AACA,gBAAMT,UAAU,GAAG;AAAA;AAAA,4CAAaJ,QAAb,CAAsBK,aAAtB,EAAnB;AACA,cAAI,CAACD,UAAD,IAAe,KAAKzB,YAAxB,EAAsC;AAEtC,gBAAMmC,UAAU,GAAG,KAAKZ,IAAL,CAAUa,gBAAV,EAAnB;AACA,gBAAMC,SAAS,GAAGZ,UAAU,CAACa,aAA7B;AAEAtD,UAAAA,IAAI,CAACuD,QAAL,CAAc,KAAK1C,iBAAnB,EAAsCwC,SAAtC,EAAiDF,UAAjD;;AACA,eAAKtC,iBAAL,CAAuB2C,SAAvB,GATe,CAWf;;;AACA,gBAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAK9C,iBAAL,CAAuB+C,CAAlC,EAAqC,KAAK/C,iBAAL,CAAuBgD,CAA5D,CAAd;AACA,eAAKtB,IAAL,CAAUkB,KAAV,GAAkBA,KAAK,GAAG,GAAR,GAAcC,IAAI,CAACI,EAAnB,GAAwB,EAAxB,GAA6B,GAA/C,CAbe,CAef;;AACA,gBAAMC,UAAU,GAAG,KAAKC,SAAL,GAAiBjB,EAApC;AACA,gBAAMkB,MAAM,GAAG,IAAIjE,IAAJ,CACXmD,UAAU,CAACU,CAAX,GAAe,KAAKhD,iBAAL,CAAuBgD,CAAvB,GAA2BE,UAD/B,EAEXZ,UAAU,CAACS,CAAX,GAAe,KAAK/C,iBAAL,CAAuB+C,CAAvB,GAA2BG,UAF/B,EAGXZ,UAAU,CAACe,CAHA,CAAf;AAKA,eAAK3B,IAAL,CAAU4B,gBAAV,CAA2BF,MAA3B;AACA,gBAAMG,OAAO,GAAGnB,WAAW,CAACC,GAAZ,EAAhB,CAvBe,CAwBf;AACH;;AAEOzB,QAAAA,cAAc,CAAC4C,YAAD,EAA2BC,aAA3B,EAAsDC,OAAtD,EAAyF;AAC3G;AACA,gBAAMC,YAAY,GAAGF,aAAa,CAAC/B,IAAd,CAAmBpB,YAAnB;AAAA;AAAA,2CAArB;;AACA,cAAIqD,YAAJ,EAAkB;AACd,iBAAKxD,YAAL,GAAoB,IAApB;;AACA,gBAAI,KAAKJ,UAAT,EAAqB;AACjB,mBAAK6D,MAAL,CAAYD,YAAZ,EADiB,CACW;AAC/B;AACJ;AACJ;;AAEO7C,QAAAA,YAAY,CAAC0C,YAAD,EAA2BC,aAA3B,EAAsDC,OAAtD,EAAyF;AACzG,cAAID,aAAa,CAAC/B,IAAd,CAAmBpB,YAAnB,CAAgC,cAAhC,CAAJ,EAAqD;AACjD,iBAAKH,YAAL,GAAoB,KAApB;AACH;AACJ;;AAEOyD,QAAAA,MAAM,CAACD,YAAD,EAA6B;AACvC,eAAK5D,UAAL,GAAkB,KAAlB,CADuC,CAGvC;;AACA4D,UAAAA,YAAY,CAACE,UAAb,CAAwB,KAAKC,WAA7B;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAa,kCAAiC,KAAKF,WAAY,EAA/D,EALuC,CAOvC;;AACA,eAAKG,YAAL,CAAkB,MAAM;AACpB,iBAAKlE,UAAL,GAAkB,IAAlB,CADoB,CAEpB;;AACA,gBAAI,KAAKI,YAAL,IAAqBwD,YAAY,CAACjC,IAAb,CAAkBwC,OAA3C,EAAoD;AAChD,mBAAKN,MAAL,CAAYD,YAAZ;AACH;AACJ,WAND,EAMG,KAAKQ,cANR;AAOH;;AAEMN,QAAAA,UAAU,CAACO,MAAD,EAAiB;AAC9B,eAAKlE,cAAL,IAAuBkE,MAAvB;;AACA,cAAI,KAAKlE,cAAL,IAAuB,CAA3B,EAA8B;AAC1B,iBAAKwB,IAAL,CAAU2C,OAAV;AACH;AACJ,SAvIgC,CAyIjC;;;AACOC,QAAAA,gBAAgB,GAAW;AAC9B,iBAAO,KAAKpE,cAAL,GAAsB,KAAKyB,SAAlC;AACH;;AA5IgC,O;;;;;iBAEN,G;;;;;;;iBAGA,G;;;;;;;iBAGE,E;;;;;;;iBAGG,C;;;;;;;iBAGA,G","sourcesContent":["import { _decorator, Component, Node, Vec3, CircleCollider2D, Contact2DType, Collider2D, \r\n         IPhysics2DContact, RigidBody2D, Vec2, ERigidBody2DType } from 'cc';\r\nimport { EnemyManager } from './EnemyManager';\r\nimport { PlayerCombat } from './PlayerCombat';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Enemy')\r\nexport class Enemy extends Component {\r\n    @property({ tooltip: '血量' })\r\n    public maxHealth: number = 100;\r\n\r\n    @property({ tooltip: '移动速度' })\r\n    public moveSpeed: number = 250;\r\n\r\n    @property({ tooltip: '攻击力' })\r\n    public attackPower: number = 25;\r\n\r\n    @property({ tooltip: '攻击间隔(秒)' })\r\n    public attackInterval: number = 1;\r\n\r\n    @property({ tooltip: '安全距离' })\r\n    private _safeDistance: number = 100;\r\n\r\n    private _isAttacking: boolean = false;\r\n    private _canAttack: boolean = true;\r\n    private _currentDirection: Vec3 = new Vec3();\r\n    private _collider: CircleCollider2D | null = null;\r\n    private _currentHealth: number = 0;\r\n    private _isColliding: boolean = false;\r\n    private _playerCombat: PlayerCombat | null = null;\r\n\r\n    onLoad() {\r\n        this._collider = this.getComponent(CircleCollider2D);\r\n        if (this._collider) {\r\n            this._collider.group = 4;\r\n            this._collider.enabled = true;\r\n            this._collider.sensor = true; // 设置为传感器，不参与物理模拟\r\n            this._collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n            this._collider.on(Contact2DType.END_CONTACT, this.onEndContact, this);\r\n            this._safeDistance = this._collider.radius * 2;\r\n        }\r\n\r\n        // 设置刚体属性\r\n        const rigidbody = this.getComponent(RigidBody2D);\r\n        if (rigidbody) {\r\n            rigidbody.type = ERigidBody2DType.Dynamic;\r\n            rigidbody.fixedRotation = true;  // 防止旋转\r\n            rigidbody.linearDamping = 0;     // 没有阻尼\r\n            rigidbody.gravityScale = 0;      // 无重力\r\n            rigidbody.enabledContactListener = true;\r\n        }\r\n\r\n        // 添加到 EnemyManager\r\n        EnemyManager.instance.addEnemy(this.node);\r\n        // 初始化血量\r\n        this._currentHealth = this.maxHealth;\r\n\r\n         // 获取玩家的 PlayerCombat 组件\r\n         const playerNode = EnemyManager.instance.getPlayerNode();\r\n         if (playerNode) {\r\n             this._playerCombat = playerNode.getComponent(PlayerCombat);\r\n         }\r\n     }\r\n\r\n    onDestroy() {\r\n        if (this._collider) {\r\n            this._collider.off(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n            this._collider.off(Contact2DType.END_CONTACT, this.onEndContact, this);\r\n        }\r\n\r\n        // 从 EnemyManager 移除\r\n        if (EnemyManager.instance) {\r\n            EnemyManager.instance.removeEnemy(this.node);\r\n        }\r\n    }\r\n\r\n    update(dt: number) {\r\n        const startTime = performance.now();\r\n        const playerNode = EnemyManager.instance.getPlayerNode();\r\n        if (!playerNode || this._isColliding) return;\r\n\r\n        const currentPos = this.node.getWorldPosition();\r\n        const targetPos = playerNode.worldPosition;\r\n        \r\n        Vec3.subtract(this._currentDirection, targetPos, currentPos);\r\n        this._currentDirection.normalize();\r\n    \r\n        // 更新旋转\r\n        const angle = Math.atan2(this._currentDirection.y, this._currentDirection.x);\r\n        this.node.angle = angle * 180 / Math.PI + 90 + 180;\r\n    \r\n        // 平滑移动\r\n        const moveAmount = this.moveSpeed * dt;\r\n        const newPos = new Vec3(\r\n            currentPos.x + this._currentDirection.x * moveAmount,\r\n            currentPos.y + this._currentDirection.y * moveAmount,\r\n            currentPos.z\r\n        );\r\n        this.node.setWorldPosition(newPos);\r\n        const endTime = performance.now();\r\n        //console.log(`Update time: ${endTime - startTime}ms`);\r\n    }\r\n\r\n    private onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        // 检查碰撞对象是否有 PlayerCombat 组件\r\n        const playerCombat = otherCollider.node.getComponent(PlayerCombat);\r\n        if (playerCombat) {\r\n            this._isColliding = true;\r\n            if (this._canAttack) {\r\n                this.attack(playerCombat);  // 将 playerCombat 传递给 attack 方法\r\n            }\r\n        }\r\n    }\r\n\r\n    private onEndContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        if (otherCollider.node.getComponent('PlayerCombat')) {\r\n            this._isColliding = false;\r\n        }\r\n    }\r\n\r\n    private attack(playerCombat: PlayerCombat) {\r\n        this._canAttack = false;\r\n        \r\n        // 直接对玩家造成伤害\r\n        playerCombat.takeDamage(this.attackPower);\r\n        console.log(`Enemy attacked player, damage: ${this.attackPower}`);\r\n        \r\n        // 攻击间隔后重置攻击状态\r\n        this.scheduleOnce(() => {\r\n            this._canAttack = true;\r\n            // 检查玩家是否仍在碰撞范围内\r\n            if (this._isColliding && playerCombat.node.isValid) {\r\n                this.attack(playerCombat);\r\n            }\r\n        }, this.attackInterval);\r\n    }\r\n\r\n    public takeDamage(damage: number) {\r\n        this._currentHealth -= damage;\r\n        if (this._currentHealth <= 0) {\r\n            this.node.destroy();\r\n        }\r\n    }\r\n\r\n    // 获取当前血量百分比（用于血条显示）\r\n    public getHealthPercent(): number {\r\n        return this._currentHealth / this.maxHealth;\r\n    }\r\n}"]}